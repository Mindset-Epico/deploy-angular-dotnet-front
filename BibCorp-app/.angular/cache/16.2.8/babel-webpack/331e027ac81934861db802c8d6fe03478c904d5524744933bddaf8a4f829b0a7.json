{"ast":null,"code":"export class FormValidator {\n  static argsCompare(arg, argConfirm) {\n    return group => {\n      const formGroup = group;\n      const control = formGroup.controls[arg];\n      const matchingControl = formGroup.controls[argConfirm];\n      if (matchingControl.errors && !matchingControl.errors['mustMatch']) {\n        return null;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({\n          mustMatch: true\n        });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    };\n  }\n  static checkFieldsWhithError(nomeCampo) {\n    return {\n      'is-invalid': nomeCampo.errors && nomeCampo.touched\n    };\n  }\n  static returnMessage(nomeCampo, elementoCampo) {\n    if (nomeCampo.errors?.[\"required\"]) return `Este campo é obrigatório.`;\n    if (nomeCampo.errors?.[\"minlength\"]) return `Este campo deve conter no mínimo ${nomeCampo.errors?.[\"minlength\"].requiredLength} caracteres`;\n    if (nomeCampo.errors?.[\"maxlength\"]) return `Este campo deve conter no máximo ${nomeCampo.errors?.[\"maxlength\"].requiredLength} caracteres`;\n    if (nomeCampo.errors?.[\"max\"]) return `Este campo está limitado a ${nomeCampo.errors?.[\"max\"].max} unidades.`;\n    if (nomeCampo.errors?.[\"email\"]) return `Este campo está inválido`;\n    if (elementoCampo == \"Confirmar Senha\") {\n      if (nomeCampo.errors) return 'Confirmação de senha inválida';\n    }\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}