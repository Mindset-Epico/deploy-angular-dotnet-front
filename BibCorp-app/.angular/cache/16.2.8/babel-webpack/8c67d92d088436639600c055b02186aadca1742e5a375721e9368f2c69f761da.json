{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map, take } from 'rxjs';\nimport { ResultadoPaginado } from 'src/app/shared';\nimport { environment } from 'src/assets/environments/environments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AcervoService = /*#__PURE__*/(() => {\n  var _class;\n  class AcervoService {\n    constructor(http) {\n      this.http = http;\n      this.baseURL = environment.apiURL + 'Acervos/';\n    }\n    getAcervos(fisltrarPor, TipoFiltro) {\n      console.log(this.baseURL);\n      return this.http.get(this.baseURL).pipe(take(3));\n    }\n    getGoogleBooks(isbn) {\n      console.log(this.baseURL);\n      return this.http.get(`${this.baseURL}External/${isbn}/googlebooks`).pipe(take(3));\n    }\n    getAcervoById(id) {\n      console.log(this.baseURL);\n      return this.http.get(`${this.baseURL}${id}`).pipe(take(3));\n    }\n    getAcervoByISBN(isbn) {\n      console.log(this.baseURL);\n      return this.http.get(`${this.baseURL}${isbn}/ISBN`).pipe(take(3));\n    }\n    createAcervo(acervo) {\n      return this.http.post(this.baseURL, acervo).pipe(take(3));\n    }\n    saveAcervo(acervo) {\n      console.log(this.baseURL);\n      return this.http.put(`${this.baseURL}${acervo.id}`, acervo).pipe(take(3));\n    }\n    deleteAcervo(acervoId) {\n      return this.http.delete(`${this.baseURL}${acervoId}?acervo=${acervoId}`).pipe(take(3));\n    }\n    getAcervosRecentes(pagina, itensPorPagina, argumento, pesquisarPor = 'Todos', genero = 'Todos') {\n      console.log(this.baseURL);\n      const resultadoPaginado = new ResultadoPaginado();\n      let parametrosHttp = new HttpParams();\n      if (pagina != null && itensPorPagina != null) {\n        parametrosHttp = parametrosHttp.append('numeroDaPagina', pagina.toString());\n        parametrosHttp = parametrosHttp.append('tamanhoDaPagina', itensPorPagina.toString());\n        parametrosHttp = parametrosHttp.append('pesquisarPor', pesquisarPor);\n        parametrosHttp = parametrosHttp.append('genero', genero);\n      }\n      if (argumento != null && argumento != '') {\n        parametrosHttp = parametrosHttp.append('argumento', argumento);\n      }\n      return this.http.get(`${this.baseURL}Recentes`, {\n        observe: 'response',\n        params: parametrosHttp\n      }).pipe(take(3), map(response => {\n        resultadoPaginado.resultado = response.body;\n        if (response.headers.has('Paginacao')) {\n          resultadoPaginado.paginacao = JSON.parse(response.headers.get('Paginacao'));\n        }\n        return resultadoPaginado;\n      }));\n    }\n    getAcervosPaginacao(pagina, itensPorPagina, argumento, pesquisarPor = 'Todos', genero = 'Todos') {\n      console.log(this.baseURL);\n      const resultadoPaginado = new ResultadoPaginado();\n      let parametrosHttp = new HttpParams();\n      if (pagina != null && itensPorPagina != null) {\n        parametrosHttp = parametrosHttp.append('numeroDaPagina', pagina.toString());\n        parametrosHttp = parametrosHttp.append('tamanhoDaPagina', itensPorPagina.toString());\n        parametrosHttp = parametrosHttp.append('pesquisarPor', pesquisarPor);\n        parametrosHttp = parametrosHttp.append('genero', genero);\n      }\n      if (argumento != null && argumento != '') {\n        parametrosHttp = parametrosHttp.append('argumento', argumento);\n      }\n      return this.http.get(`${this.baseURL}Paginacao`, {\n        observe: 'response',\n        params: parametrosHttp\n      }).pipe(take(3), map(response => {\n        resultadoPaginado.resultado = response.body;\n        if (response.headers.has('Paginacao')) {\n          resultadoPaginado.paginacao = JSON.parse(response.headers.get('Paginacao'));\n        }\n        return resultadoPaginado;\n      }));\n    }\n  }\n  _class = AcervoService;\n  _class.ɵfac = function AcervoService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return AcervoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}