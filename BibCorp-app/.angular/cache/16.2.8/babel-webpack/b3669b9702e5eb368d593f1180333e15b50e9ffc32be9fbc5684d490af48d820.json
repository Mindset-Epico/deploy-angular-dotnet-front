{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { take, map } from \"rxjs\";\nimport { ResultadoPaginado } from \"src/app/shared\";\nimport { environment } from \"src/assets/environments/environments\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PatrimonioService = /*#__PURE__*/(() => {\n  var _class;\n  class PatrimonioService {\n    constructor(http) {\n      this.http = http;\n      this.baseURL = environment.apiURL + \"Patrimonios/\";\n    }\n    getPatrimonios() {\n      console.log(this.baseURL);\n      return this.http.get(this.baseURL).pipe(take(3));\n    }\n    getPatrimoniosByISBN(isbn) {\n      return this.http.get(`${this.baseURL}${isbn}/ISBN`).pipe(take(3));\n    }\n    getPatrimoniosLivres(isbn) {\n      return this.http.get(`${this.baseURL}Livres/${isbn}`).pipe(take(3));\n    }\n    getPatrimonioById(patrimonioId) {\n      return this.http.get(`${this.baseURL}${patrimonioId}`).pipe(take(3));\n    }\n    createPatrimonio(patrimonio) {\n      return this.http.post(this.baseURL, patrimonio).pipe(take(3));\n    }\n    savePatrimonio(patrimonio) {\n      return this.http.put(`${this.baseURL}${patrimonio.id}`, patrimonio).pipe(take(3));\n    }\n    getPatrimoniosPaginacao(pagina, itensPorPagina, argumento, pesquisarPor = \"Todos\", genero = \"Todos\") {\n      console.log(this.baseURL);\n      const resultadoPaginado = new ResultadoPaginado();\n      let parametrosHttp = new HttpParams();\n      if (pagina != null && itensPorPagina != null) {\n        parametrosHttp = parametrosHttp.append(\"numeroDaPagina\", pagina.toString());\n        parametrosHttp = parametrosHttp.append(\"tamanhoDaPagina\", itensPorPagina.toString());\n        parametrosHttp = parametrosHttp.append(\"pesquisarPor\", pesquisarPor);\n        parametrosHttp = parametrosHttp.append(\"genero\", genero);\n      }\n      if (argumento != null && argumento != \"\") {\n        parametrosHttp = parametrosHttp.append(\"argumento\", argumento);\n      }\n      return this.http.get(`${this.baseURL}Paginacao`, {\n        observe: \"response\",\n        params: parametrosHttp\n      }).pipe(take(3), map(response => {\n        resultadoPaginado.resultado = response.body;\n        if (response.headers.has(\"Paginacao\")) {\n          resultadoPaginado.paginacao = JSON.parse(response.headers.get(\"Paginacao\"));\n        }\n        return resultadoPaginado;\n      }));\n    }\n    deletePatrimonio(patrimonioId) {\n      return this.http.delete(`${this.baseURL}${patrimonioId}?patrimonio=${patrimonioId}`).pipe(take(3));\n    }\n  }\n  _class = PatrimonioService;\n  _class.ɵfac = function PatrimonioService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return PatrimonioService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}